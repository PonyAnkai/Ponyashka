import disnake
from disnake.ext import commands
from disnake.errors import HTTPException

import random
import time
import random
import math
import pymorphy3
import requests

from .module import REQ_database as Rdb


'''
# ! –ü—Ä–∏–∫–æ–ª—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ
import os.path
import shutil   
'''
db = Rdb.DataBase

class Fun(commands.Cog):
    def __init__(self, bot=commands.Bot):
        self.bot = bot
    
    # ! –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–∂–µ
    @commands.command(name='rand', aliases=['—Ä–∞–Ω–¥–æ–º', '—Ä–∞–Ω–¥', '—Å–ª—É—á'])
    async def rand(self, ctx):
        
        mess = ctx.message.content.split(' ')
        elements = []
        try:
            mess_ = round(abs(int(mess[1])))
            try:
                elements.append(mess_)
            except IndexError:
                await ctx.send('–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∏—Å–ª–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç')
        except ValueError:
            await ctx.send('–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∏—Å–ª–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç')
            return 0

        try:
            mess_ = mess[2]
            try:
                mess_ = round(abs(int(mess_)))
                elements.append(mess_)
            except ValueError:
                elements.append(False)
        except IndexError:
            elements.append(False)

        if not elements[1]:
            await ctx.send(random.randint(0, elements[0]))
        elif elements[1]:
            await ctx.send(random.randint(elements[0], elements[1]))

    @commands.command(name='gif', aliases=['–≥–∏—Ñ', '–≥–∏—Ñ–∫–∞'])
    async def gif(self, ctx):
        file = open('../PonyashkaDiscord/other_content/Gif/base.txt', mode='r')

        gifs = []
        for item in file:
            gifs.append(item.rstrip())
        file.close()

        await ctx.send(random.choice(gifs))

    @commands.command(name='gifadd', aliases=['–¥–æ–±–≥–∏—Ñ', '–Ω–æ–≤–≥–∏—Ñ'])
    async def gifadd(self, ctx):
        file = open('../PonyashkaDiscord/other_content/Gif/base.txt', mode='r')

        try:
            gifs_user = ctx.message.content.split(' ')[1]
        except:
            await ctx.send('—á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫')
            return

        gifs = []
        for item in file:
            gifs.append(item.rstrip())
        file.close()
        
        if gifs_user in gifs:
            await ctx.send('–¢–∞–∫–æ–µ —É–∂–µ –µ—Å—Ç—å')
            return
        else:
            await ctx.send('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫')
            gifs.append(gifs_user)
        
        file = open('../PonyashkaDiscord/content/Gif/base.txt', mode='w')
        for i in range(len(gifs)):
            file.writelines(f'{gifs[i]}\n')
        file.close()

    @commands.command(name='russianrollete', aliases=['rr', '—Ä—É–ª–µ—Ç–∫–∞', 'rollete'])
    async def russianRollete(self, ctx):

        user = ctx.message.author.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            bullet = int(ctx.message.content.lower().split(' ')[1])
        except:
            embed = disnake.Embed(description='–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ **–ø—É–ª—å**')
            return await ctx.send(embed=embed)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if not 0 < bullet < 7:
            embed = disnake.Embed(description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ **–ø—É–ª—å** –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1-6')
            return await ctx.send(embed=embed)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        endGame = float('{:.2f}'.format(bullet / 6))
        chance = float('{:.2f}'.format(random.random()))

        # –í–∑—è—Ç–∏–µ —Å—Ç—Ä–∏–∫–æ–≤ –∏–∑ –±–¥
        strick = db.Fun(user=user).get()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        if chance > endGame:
            db.Fun(user=user, strick='rolete').add()
            db.Fun(user=user).maxis()
            embed = disnake.Embed(
                title=f'**–í—ã—Å—Ç—Ä–µ–ª–∞ –Ω–µ –±—ã–ª–æ. \n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é** üéâ',
                color= disnake.Colour.green())
            embed.set_footer(text=f'WinSrick: {strick[3]+1}')
            return await ctx.send(embed=embed)
        else:
            db.Fun(user=user, strick='rolete').clear()
            embed = disnake.Embed(
                title=f'**–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª —ç—Ç–æ–π –∂–∏–∑–Ω–∏** üíÄ',
                color= disnake.Colour.red())
            embed.set_footer(text='WinSrick: 0')
            return await ctx.send(embed=embed)

    @commands.command(name='coin', aliases=['–º–æ–Ω–µ—Ç–∫–∞', '–º–æ–Ω–µ—Ç–æ—á–∫–∞', '–∫–æ–∏–Ω'])
    async def coin(self, ctx):

        user = ctx.message.author.id

        try:
            mess = ctx.message.content.split(' ')[1]
        except IndexError:
            await ctx.send('–£–∫–∞–∂–∏—Ç–µ, –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞, –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')
            return False
        if mess == '–æ—Ä—ë–ª' or mess == '–æ—Ä–µ–ª':
            count = 1
        elif mess == '—Ä–µ—à–∫–∞':
            count = 2
        else:
            await ctx.send('–£–∫–∞–∂–∏—Ç–µ, –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞, –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')
            return False
        
        bot_var = random.randint(1, 2)
        strick = db.Fun(user=user).get()

        if bot_var == count and count == 2:
            db.Fun(user=user, strick='coin').add()
            db.Fun(user=user).maxis()
            emb = disnake.Embed(description=f'**–í–æ—É! –≠—Ç–æ –æ–∫–∞–∑–∞–ª–∞—Å—å ``—Ä–µ—à–∫–∞``! –ü–æ–±–µ–¥–∞ –∑–∞ —Ç–æ–±–æ–π!**\nWinSrick: ``{strick[1]+1}``',
                                colour=disnake.Color.green())
            await ctx.send(embed=emb)
        elif bot_var != count and count == 1:
            db.Fun(user=user, strick='coin').clear()
            emb = disnake.Embed(description='**–õ–æ–ª, –≠—Ç–æ –æ–∫–∞–∑–∞–ª–∞—Å—å ``—Ä–µ—à–∫–∞``. –ü—Ä–∏—Ö–æ–¥–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.**\nWinSrick: ``0``',
                                colour=disnake.Color.red())
            await ctx.send(embed=emb)
        elif bot_var == count and count == 1:
            db.Fun(user=user, strick='coin').add()
            db.Fun(user=user).maxis()
            emb = disnake.Embed(description=f'**–í–æ—É! –≠—Ç–æ –æ–∫–∞–∑–∞–ª—Å—è ``–æ—Ä—ë–ª``! –ü–æ–±–µ–¥–∞ –∑–∞ —Ç–æ–±–æ–π!**\nWinSrick: ``{strick[1]+1}``',
                                colour=disnake.Color.green())
            await ctx.send(embed=emb)
        elif bot_var != count and count == 2:
            db.Fun(user=user, strick='coin').clear()
            emb = disnake.Embed(description='**–õ–æ–ª, –≠—Ç–æ –æ–∫–∞–∑–∞–ª—Å—è ``–æ—Ä—ë–ª``. –ü—Ä–∏—Ö–æ–¥–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.**\nWinSrick: ``0``',
                                colour=disnake.Color.red())
            await ctx.send(embed=emb)

    @commands.command(name='brainfuck', aliases=['fuck', 'bf'])
    async def brainFuck(self, ctx):

        operators = {
            '+':[10, 100_000], 
            '-':[10, 100_000], 
            '*':[2, 1000], 
            '//':[10_000, 1_000_000]}
        SO = random.choice(list(operators.keys()))

        # if SO == '/':
        #     firstNum = random.randint(operators[SO][0], operators[SO][1]-1)
        #     secondNum = random.randint(operators[SO][0], firstNum-1)
        if SO == '-':
            firstNum = random.randint(operators[SO][0], operators[SO][1])
            secondNum = random.randint(operators[SO][0], firstNum-1)
        elif SO == '//':
            firstNum = random.randint(operators[SO][0], operators[SO][1])
            secondNum = random.randint(operators[SO][0], firstNum)
        elif SO == '+':
            firstNum = random.randint(operators[SO][0], operators[SO][1])
            secondNum = random.randint(operators[SO][0], operators[SO][1])
        else:
            firstNum = random.randint(operators[SO][0], operators[SO][1]-1)
            secondNum = random.randint(firstNum+1, operators[SO][1])
        
        operNum = eval(f'{firstNum}{SO}{secondNum}')
        beforeNum = operNum
        lastSides = None

        # –¶–≤–µ—Ç–∞
        colorNum = {'—á–µ—Ä–Ω—ã–π':0, '–∫—Ä–∞—Å–Ω—ã–π':1,'–æ—Ä–∞–Ω–∂–µ–≤—ã–π':2, '–∂–µ–ª—Ç—ã–π':3, '–∑–µ–ª–µ–Ω—ã–π':4, '–≥–æ–ª—É–±–æ–π':5, '—Å–∏–Ω–∏–π':6, '—Å–µ—Ä—ã–π':7, '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π':8, '–±–µ–ª—ã–π':9}
        reverseColorNum = {0:'—á–µ—Ä–Ω—ã–π', 1:'–∫—Ä–∞—Å–Ω—ã–π', 2:'–æ—Ä–∞–Ω–∂–µ–≤—ã–π', 3:'–∂–µ–ª—Ç—ã–π', 4:'–∑–µ–ª–µ–Ω—ã–π', 5:'–≥–æ–ª—É–±–æ–π', 6:'—Å–∏–Ω–∏–π', 7:'—Å–µ—Ä—ã–π', 8:'—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', 9:'–±–µ–ª—ã–π'}

        # –°—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç + –¥–µ–Ω—å/–Ω–æ—á—å
        worldSides = {0:'—Å–µ–≤–µ—Ä', 1:'—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫', 2:'–≤–æ—Å—Ç–æ–∫', 3:'—é–≥–æ-–≤–æ—Å—Ç–æ–∫', 4:'—é–≥', 5:'—é–≥–æ-–∑–∞–ø–∞–¥', 6:'–∑–∞–ø–∞–¥', 7:'—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥', 8:'–Ω–æ—á—å', 9:'–¥–µ–Ω—å'}
        reverseWorldSide = {'—Å–µ–≤–µ—Ä':0, '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫':1, '–≤–æ—Å—Ç–æ–∫':2, '—é–≥–æ-–≤–æ—Å—Ç–æ–∫':3, '—é–≥':4, '—é–≥–æ-–∑–∞–ø–∞–¥':5,'–∑–∞–ø–∞–¥':6,'—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥':7, '–Ω–æ—á—å':8, '–¥–µ–Ω—å':9}

        # –†—É–Ω—ã
        # –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        # –†–µ–≥–∏–æ–Ω—ã
        # –ò–º–µ–Ω–∞

        #! –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        def countColor(enter, up_down, sys=False):
            if up_down == 'up':
                colors = [0]*10
                for item in str(operNum):
                    colors[int(colorNum[reverseColorNum[int(item)]])] += 1
                return enter.lower() == reverseColorNum[colors.index(max(colors))]
            else:
                colors = [0]*10
                for item in str(operNum):
                    colors[int(colorNum[reverseColorNum[int(item)]])] += 1
                return enter.lower() == reverseColorNum[colors.index(min(colors, key=lambda e: e if e != 0 else 10))]
        def nextNumInON(enter):
            if int(enter.split()[1]) == -1: return (enter.split())[0].lower() == '–Ω–∏–∫–∞–∫–∞—è'
            return int((enter.split())[0]) == int((enter.split())[1])
        def summ(enter):
            nums = [int(item) for item in list(str(operNum))]
            return int(enter) == sum(nums)
        def lineColors(enter):
            line = enter.split()
            lineOper = [f'{reverseColorNum[int(num)]}' for num in str(operNum)]
            for i, item in enumerate(lineOper):
                if line[i].lower() != item: return False
            return True
        def YES_NO(bool_):
            if bool_: return '–¥–∞'
            return '–Ω–µ—Ç'
        def MORE_LESS(num1, num2):
            if num1 == num2: return '—Ä–∞–≤–Ω–æ'
            if num1 > num2: return '–±–æ–ª—å—à–µ'
            return '–º–µ–Ω—å—à–µ'
        def simpleNum(enter):
            nums = [int(item) for item in list(str(operNum))]
            count = 0
            for item in nums:
                count += 1 if item in [2, 3, 5, 7] else 0 
            return int(enter) == int(count)
            
        # lvl= easy, medium, high, hell
        toRuTags = {
            'easy':'–ü—Ä–æ—Å—Ç–æ–µ', 'medium':'–°—Ä–µ–¥–Ω–µ–µ', 'high':'—Å–ª–æ–∂–Ω–æ–µ', 'hell':'–∞–¥—Å–∫–æ–µ',
            'calculate':'–≤—ã—á–∏—Å–ª–µ–Ω–∏—è', 'value':'–∑–Ω–∞—á–µ–Ω–∏–µ', 'thisNum':'—Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ',
            'definition':'–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', 'digit':'—Ü–∏—Ñ—Ä–∞', 'color':'—Ü–≤–µ—Ç', 'firstNum':'–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ',
            'count':'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'more':'–±–æ–ª—å—à–µ', 'less':'–º–µ–Ω—å—à–µ', 'fullNum':'–ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ',
            'reference':'—Å–ø—Ä–∞–≤–∫–∞', 'n-num':'n-–∞—è —Ü–∏—Ñ—Ä–∞', 'after':'–ø–æ—Å–ª–µ', 'summ':'—Å—É–º–º–∞',
            'dispatcher':'–¥–∏—Å–ø–µ—Ç—á–µ—Ä', 'chain':'—Ü–µ–ø–æ—á–∫–∞', 'comparison':'—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            'simple':'–ø—Ä–æ—Å—Ç—ã–µ —Ü–∏—Ñ—Ä—ã', 'side':'—Å—Ç–æ—Ä–æ–Ω—ã', 'minus':'—Ä–∞–∑–Ω–∏—Ü–∞', 'multi':'—É–º–Ω–æ–∂–µ–Ω–∏–µ',
            'factorial':'—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª', 'lastNum':'–ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞'
                    }
        question = {
            'q1':[
                '–ß–µ–º—É —Ä–∞–≤–Ω—è–µ—Ç—Å—è –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ?', 
                lambda enter: int(enter) == operNum,
                ['easy', 'calculation', 'value', 'thisNum']
                ],
            'q2':[
                '–ö–∞–∫–æ–π —Ü–≤–µ—Ç –æ–±–æ–∑–Ω–∞—á–µ—Ç –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞, —Ç–µ–∫—É—â–µ–º —á–∏—Å–ª–µ?', 
                lambda enter: colorNum[enter.lower()] == int(str(operNum)[0]),
                ['easy', 'definition', 'firstNum', 'digit', 'color', 'thisNum']
                ],
            'q3':[
                '–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ —Ç–µ–∫—É—â–µ–º —á–∏—Å–ª–µ?', 
                lambda enter: countColor(enter, 'up'),
                ['medium', 'calculate', 'count', 'more', 'color', 'thisNum']
                ],
            'q4':[
                '–ö–∞–∫–æ–π —Ü–≤–µ—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ü–∏—Ñ—Ä–∞ ({num})?', 
                lambda enter: (enter.split())[0].lower() == reverseColorNum[int((enter.split())[1])],
                ['easy', 'definition', 'color', 'refence']
                ],
            'q5':[
                '–ö–∞–∫–∞—è —Ü–∏—Ñ—Ä–∞ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç ({num}) —Ü–≤–µ—Ç?', 
                lambda enter: int((enter.split())[0]) == colorNum[reverseColorNum[int((enter.split())[1])]] ,
                ['easy', 'definition', 'digit', 'reference']
                ],
            'q6':[
                '–ö–∞–∫–æ–π —Ü–≤–µ—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç {num}-—è —Ü–∏—Ñ—Ä–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞?', 
                lambda enter: (enter.split())[0].lower() == reverseColorNum[int(str(operNum)[int((enter.split())[1])])],
                ['medium', 'definition', 'n-num', 'color', 'thisNum']
                ],
            'q7':[
                '–ö–∞–∫–∞—è —Ü–∏—Ñ—Ä–∞ –∏–¥—ë—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–π ({num}) –≤ —Ç–µ–∫—É—â–µ–º —á–∏—Å–ª–µ?', 
                lambda enter: nextNumInON(enter),
                ['medium', 'definition', 'digit', 'after', 'color', 'thisNum']
                ],
            'q8':[
                '–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –≤ —Ç–µ–∫—É—â–µ–º —á–∏—Å–ª–µ?', 
                lambda enter: countColor(enter, 'down'),
                ['medium', 'calculate', 'count', 'less', 'color', 'thisNum']
                ],
            'q9':[
                '–ö–∞–∫–æ–≤–∞ —Å—É–º–º–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞?', 
                lambda enter: summ(enter),
                ['medium', 'calculate', 'summ', 'digit', 'thisNum']
                ],
            'q10':[
                '–ö–∞–∫–æ–µ –±—É–¥–µ—Ç —á–∏—Å–ª–æ, –µ—Å–ª–∏ —Å–ª–æ–∂–∏—Ç—å ({num1}-—é) —Ü–∏—Ñ—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ —Å ({num2}-–æ–π) —Ü–∏—Ñ—Ä–æ–π —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞', 
                lambda enter: int((enter.split())[0]) == (int((enter.split())[1]))+int((enter.split())[2]),
                ['high', 'calculate', 'summ', 'digigt', 'thisNum', 'dispatcher']
                ],
            'q11':[
                '–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ü–µ–ø–æ—á–∫–∞ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞?', 
                lambda enter: lineColors(enter),
                ['medium', 'difinition', 'chain', 'thisNum']
                ],
            'q12':[
                '–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±—É–¥–µ—Ç —É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞, –µ—Å–ª–∏ —Å–ª–æ–∂–∏—Ç—å ({num1}-—é) —Ü–∏—Ñ—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ —Å ({num2}-–æ–π) —Ü–∏—Ñ—Ä–æ–π —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞', 
                lambda enter: enter.split()[0].lower() == reverseColorNum[ int(str( int(enter.split()[1]) + int(enter.split()[2]) )[-1]) ],
                ['high', 'calculate', 'summ', 'digit', 'definition', 'color', 'thisNum', 'dispatcher']
                ],
            'q13':[
                '({num1}-—è) —Ü–∏—Ñ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ ({num2}-–π) —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞?', 
                lambda enter: (enter.split())[0].lower() == YES_NO((enter.split())[1] > (enter.split())[2]),
                ['medium', 'comparison', 'digit', 'more', 'thisNum', 'dispatcher']
                ],
            'q14':[
                '({num1}-—è) —Ü–∏—Ñ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ ({num2}-–π) —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞?', 
                lambda enter: (enter.split())[0].lower() == YES_NO((enter.split())[2] > (enter.split())[1]),
                ['medium', 'comparison', 'digit', 'less', 'thisNum', 'dispatcher']
                ],
            'q15':[
                '–ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –Ω–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ, —Ç–æ —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º –ø—Ä–æ—Å—Ç—ã—Ö —Ü–∏—Ñ—Ä?', 
                lambda enter: simpleNum(enter),
                ['medium', 'definition', 'count', 'digit', 'simple', 'thisNum']
                ],
            'q16':[
                '–ö–∞–∫–∞—è –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞ –ø–æ—Å–ª–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞?', 
                lambda enter: int(enter) == int((str(sum([int(item) for item in str(secondNum)])))[-1]),
                ['medium', 'calculate', 'summ', 'digit', 'definition', 'thisNum']
                ],
            'q17':[
                '–ö–∞–∫–∞—è –±—É–¥–µ—Ç —Å—É–º–º–∞ –ø–æ—Å–ª–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞?',
                lambda enter: int(enter) == sum([int(item) for item in str(secondNum)]),
                ['easy', 'digit', 'summ', 'calculate']
                ],
            'q18':[
                '–ö–∞–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ü–∏—Ñ—Ä–∞ {num}?',
                lambda enter: (enter.split())[0].lower() == worldSides[int((enter.split())[1])],
                ['easy', 'digit', 'definition', 'side']
                ],
            'q19':[
                '–ü—Ä–æ–π–¥—è –Ω–∞ {side}, –∞ –ø–æ—Å–ª–µ —É–º–Ω–æ–∂–∏–≤ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ?',
                lambda enter: int((enter.split())[0]) == (int((enter.split())[1]) * operNum),
                ['easy', 'side', 'thisNum', 'calculate']
                ],
            'q20':[
                '–ö–∞–∫–æ–π —Ü–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –Ω–æ—á–∏?',
                lambda enter: enter.lower() == reverseColorNum[8],
                ['easy', 'definition', 'color', 'side']
                ],
            'q21':[
                '–ï—Å–ª–∏ ({num1}-—è) —Ü–∏—Ñ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ ({num2}-–µ–π) —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞, —Ç–æ –ø–æ–¥–µ–ª–∏–≤ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –Ω–∏–º–∏, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ? –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞.',
                lambda enter: int(enter.split()[0]) == (operNum//abs(int(enter.split()[1])-int(enter.split()[2])) if int(enter.split()[1]) < int(enter.split()[2]) else operNum),
                ['medium', 'comparison', 'less', 'calculate', 'minus', 'n-num', 'thisNum', 'dispatcher', 'value']
                ],
            'q22':[
                '–ï—Å–ª–∏ ({num1}-—è) —Ü–∏—Ñ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ ({num2}-–µ–π) —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞, —Ç–æ —É–º–Ω–æ–∂–∏–≤ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –Ω–∞ —Å—É–º–º—É –º–µ–∂–¥—É –Ω–∏–º–∏, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ? –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞.',
                lambda enter: int(enter.split()[0]) == (operNum*(int(enter.split()[1])+int(enter.split()[2])) if int(enter.split()[1]) > int(enter.split()[2]) else operNum),
                ['medium', 'comparison', 'more', 'calculate', 'summ', 'n-num', 'thisNum', 'dispatcher', 'value']
                ],
            'q23':[
                '–ï—Å–ª–∏ –≤–∑—è—Ç—å ({num1}-—é) —Ü–∏—Ñ—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞, ({num2}-—é) —Ü–∏—Ñ—Ä—É —á–∏—Å–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç—å –∏—Ö, —Ç–æ –±—É–¥–µ—Ç –ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞?',
                lambda enter: (enter.split()[0]).lower() == MORE_LESS((int(enter.split()[1])*int(enter.split()[2])), math.factorial(int(str(operNum)[-1]))),
                ['high', 'comparison', 'more', 'less', 'calculate', 'multi', 'factorial', 'lastNum', 'thisNum', 'dispatcher']
                ],
            'q24':[
                '–ï—Å–ª–∏ –±—ã –≤–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –±—ã —Å–º–µ—à–∞—Ç—å —Ü–≤–µ—Ç–∞ ({color1}), —Ç–æ –∫–∞–∫ –±—ã –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏ –∏—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ—Å–∏ –≤–∞—Å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë {color2}, –≤ –∫–æ–Ω–µ—Ü —á–∏—Å–ª–∞?',
                lambda enter: int(enter.split()[0]) == int(enter.split()[1]),
                ['medium', 'definition', 'color', 'count', 'calculate']
                ],
            'q25':[
                '–ö–∞–∫–æ–π —Ü–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –¥–Ω—é?',
                lambda enter: enter.lower() == reverseColorNum[9],
                ['easy', 'definition', 'color', 'side']
                ],
            'q26':[
                '–ï—Å–ª–∏ –±—ã –≤–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –±—ã —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–∞ ({color1}), —Ç–æ –∫–∞–∫ –±—ã –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏ –∏—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ—Å–∏ –≤–∞—Å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë {color2}, –≤ –∫–æ–Ω–µ—Ü —á–∏—Å–ª–∞?',
                lambda enter: int(enter.split()[0]) == int(enter.split()[1]),
                ['medium', 'definition', 'color', 'count', 'calculate']
                ],
            }
        
        #! –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
        def reverseNum(upp):
            toRevs = list(str(upp))
            toRevs.reverse()
            text = ''
            for item in toRevs:
                text += item
            return int(text)
        def whereTags(tag):
            respoce = []
            for key in list(question.keys()):
                if tag in question[key][2]: respoce.append(int((key.split('q'))[1])-1)
            return respoce
        def downChancedINTOvalue(listChanced, value, q):
            index = int((q.split('q'))[1])-1
            listChanced[index] -= value
            if listChanced[index] < 0: listChanced[index] = 0 
            return listChanced
        def uppChance(listChanced, tag):
            responce = whereTags(tag)
            for index in responce:
                listChanced[index] += 35
                if listChanced[index] < 0: listChanced[index] = 0 
            return listChanced
        def downChance(listChanced, tag):
            responce = whereTags(tag)
            for index in responce:
                listChanced[index] -= 35
                if listChanced[index] < 0: listChanced[index] = 0 
            return listChanced
        def summSimpleNumMultiThisNum(thisNum):
            nums = [int(item) for item in list(str(operNum))]
            value = 0
            for item in nums:
                value += item if item in [2, 3, 5, 7] else 0 
            return int(thisNum) * int(value)
        def replaceN_num(upp):
            listOper = list(str(operNum))
            listOper[upp[0]] = str(secondNum)[upp[1]]
            num = ''
            for item in listOper:
                num += f'{item}'
            return int(num)

        complication = {
            'c1':['–¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ —É–º–Ω–æ–∂–µ–Ω–æ –Ω–∞ ({num})\n`–î–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞.`', lambda upp: abs(operNum * upp)],
            'c2':['–í —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ ({num})\n`–î–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞.`', lambda upp: abs(operNum + upp)],
            'c3':['–¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ –ø–æ–¥–µ–ª–µ–Ω–æ –Ω–∞ ({num})\n`–î–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞.`', lambda upp: operNum // upp if abs(operNum // upp) > 0 else 1],
            'c4':['–ò–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –±—ã–ª–æ –≤—ã—á—Ç–µ–Ω–æ —á–∏—Å–ª–æ ({num})\n`–î–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞.`', lambda upp: abs(operNum - upp)],
            'c5':['–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ —Ç–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º\n`–î–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞.`', lambda upp: reverseNum(upp)],
            'c6':['–£–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.\n`–ù–∞ —Å–µ—Å—Å–∏—é.`', lambda upp: uppChance(upp, 'calculate')],
            'c7':['–£–º–µ–Ω—å—à–µ–Ω —à–∞–Ω—Å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n`–ù–∞ —Å–µ—Å—Å–∏—é.`', lambda upp: downChance(upp, 'easy')],
            'c8':['–£–º–µ–Ω—å—à–µ–Ω —à–∞–Ω—Å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞\n`–ù–∞ —Å–µ—Å—Å–∏—é.`', lambda upp: downChance(upp, 'definition')],
            'c9':['–í–æ–∑–º–∏—Ç–µ –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —Ü–∏—Ñ—Ä—ã –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º —á–∏—Å–ª–µ –∏ —Å—É–º–º–∏—Ä—É–π—Ç–µ –∏—Ö, –∞ –ø–æ—Å–ª–µ —É–º–Ω–æ–∂—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ, —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –≤–∞—à–µ –Ω–æ–≤–æ–µ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ.', lambda upp: summSimpleNumMultiThisNum(upp)],
            'c10':['{num1}-—è —Ü–∏—Ñ—Ä–∞ —Ü–∏—Ñ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ {num2}-—é —Ü–∏—Ñ—Ä—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.', lambda upp: replaceN_num(upp)]

            }
        textBase = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ò–≥—Ä–∞ –∏–¥—ë—Ç –ø–æ—Ç–æ–∫–æ–º, –Ω–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —É –≤–∞—Å –±—É–¥–µ—Ç 45 —Å–µ–∫—É–Ω–¥, –ø–æ—Ç–æ–º—É –∏—Å–∫–ª—é—á–∏—Ç–µ –∏–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –¢–∞–∫–∂–µ –ø–æ–º–Ω–∏—Ç–µ, –∏–≥—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞. –£–¥–∞—á–∏ –≤–∞–º.\n## –ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ:\n**–û–ø–µ—Ä–∞—Ç–æ—Ä:** `{SO}`\n\n**–í–∞—à–µ —á–∏—Å–ª–æ:** `{firstNum}`\n**–ß–∏—Å–ª–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:** `{secondNum}`'
        message = await ctx.send(embed=
                disnake.Embed(description=textBase, colour=disnake.Color.yellow()),
            components=disnake.ui.Button(style=disnake.ButtonStyle.green, label='–ù–∞—á–∞—Ç—å', custom_id='startBrainFuck'))

        def start(e):
            return (e.author.id == ctx.author.id) and (e.component.custom_id == 'startBrainFuck')
        def check(e):
            return e.author.id == ctx.author.id

        try: startQ = await self.bot.wait_for('button_click', check=start, timeout=60)
        except TimeoutError:
            await message.edit(components=None) 
            return await ctx.send('–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏—Å—Ç–µ–∫–ª–æ')
        
        textBase = f'## –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:\n**–û–ø–µ—Ä–∞—Ç–æ—Ä:** `{'?'}`\n\n**–í–∞—à–µ —á–∏—Å–ª–æ:** `{'?'*len(str(firstNum))}`\n**–ß–∏—Å–ª–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:** `{'?'*len(str(secondNum))}`'
        await message.edit(embed=disnake.Embed(description=textBase))
        await startQ.response.edit_message(components=None)

        points = 0
        chanced = [100] * len(list(question.keys()))
        player = f'{ctx.author.name}'

        for i in range(100):
            if i == 0: enterMess = '## –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è\n\n'
            else: enterMess = ''

            if random.random() < 0.65 and i >= 3: 
                compli = random.choice(list(complication.keys()))
                diap = {'c1':[2, 100], 'c2':[100, 10_000], 'c4':[100, 10_000], 'c3':[10_000, 100_000]}
                
                if compli in ['c1', 'c2', 'c3', 'c4']:
                    RCnum = random.randint(diap[compli][0], diap[compli][1])
                    await ctx.send(f'–í–≤–µ–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ [+1 –¥–æ–ø. –æ—á–∫–æ].\n–£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ: {complication[compli][0]}'.format(num=RCnum))
                    operNum = complication[compli][1](RCnum)
                    points += 1
                elif compli in ['c5', 'c9']:
                    await ctx.send(f'–í–≤–µ–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ [+1 –¥–æ–ø. –æ—á–∫–æ].\n–£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ: {complication[compli][0]}')
                    operNum = complication[compli][1](operNum)
                    points += 1
                elif compli in ['c6', 'c7', 'c8']:
                    await ctx.send(f'–í–≤–µ–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ [+1 –¥–æ–ø. –æ—á–∫–æ].\n–£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ: {complication[compli][0]}')
                    chanced = complication[compli][1](chanced)
                    points += 1
                elif compli in ['c10']:
                    RCnum = random.choice([int(item) for item in str(operNum)])
                    IRCnum = str(operNum).index(str(RCnum))
                    RCnum2 = random.choice([int(item) for item in str(secondNum)])
                    IRCnum2 = str(secondNum).index(str(RCnum2))
                    await ctx.send(f'–í–≤–µ–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ [+1 –¥–æ–ø. –æ—á–∫–æ].\n–£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ: {complication[compli][0]}'.format(num1=IRCnum+1, num2=IRCnum2+1))
                    operNum = complication[compli][1]((IRCnum, IRCnum2))
                    points += 1


            quest = random.choices(list(question.keys()), weights=chanced)[0]
            if quest in ['q4', 'q5']:
                Rnum = random.randint(0, 9)
                if quest == 'q4': await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(num=Rnum))
                else: await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(num=reverseColorNum[Rnum]))
            elif quest == 'q6':
                Rnum = str(operNum).index(random.choice(str(operNum)))
                await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(num=int(Rnum)+1))
            # have {num}
            elif quest == 'q7':
                RN = random.choice(list(set(list(str(operNum)))))
                Inum = str(operNum).index(RN)
                Rnum = str(operNum)[Inum + 1] if len(str(operNum))-1 != Inum else -1
                await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(num=reverseColorNum[int(RN)]))
            # have {num1} and {num2}
            elif quest in ['q10', 'q12', 'q13', 'q14', 'q21', 'q22', 'q23']:
                Rnum = random.choice(str(operNum))
                Inum = str(operNum).index(Rnum)
                Rnum2 = random.choice(str(secondNum))
                Inum2 = str(secondNum).index(Rnum2)
                await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(num1=int(Inum)+1, num2=int(Inum2)+1))
            # have {num} and rand(0, 7)
            elif quest in ['q18']:
                Rnum = random.randint(0, 7)
                await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(num=Rnum))
            # have {side}
            elif quest in ['q19']:
                side = worldSides[random.randint(0, 7)]
                Rnum = reverseWorldSide[side]
                await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(side=side))
            elif quest in ['q24']:
                randomColor = [random.choice(list(reverseColorNum.keys())) for i in range(0, random.randint(1, 6))]
                appendRandomColor = random.choice(list(reverseColorNum.keys()))
                apeendText = ''
                Rnum = 0
                for item in randomColor:
                    apeendText += f'{reverseColorNum[item]} '
                    Rnum += item
                else: Rnum = int(f'{Rnum}{appendRandomColor}')
                await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(color1=apeendText, color2=appendRandomColor))
            elif quest in ['q26']:
                randomColor = [random.choice(list(reverseColorNum.keys())) for i in range(0, random.randint(2, 6))]
                appendRandomColor = random.choice(list(reverseColorNum.keys()))
                apeendText = ''
                Rnum = ''
                for index, item in enumerate(randomColor):
                    if index != len(randomColor)-1: apeendText += f'{reverseColorNum[item]} '
                    else: apeendText += f'{reverseColorNum[item]}'
                    Rnum += f'{item}'
                else: Rnum += f'{appendRandomColor}'
                await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}'.format(color1=apeendText, color2=appendRandomColor))
            else:
                await ctx.send(f'{enterMess}**{i+1} –≤–æ–ø—Ä–æ—Å [{player}]:** {question[quest][0]}')
            chanced = downChancedINTOvalue(chanced, 20, quest)

            try: responce =  await self.bot.wait_for('message', check=check, timeout=45)
            except: return await ctx.send('–£–≤—ã, –Ω–æ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.')
            request = responce.content

            # if need append 1 argument
            if quest in ['q4', 'q5', 'q6', 'q7', 'q18', 'q19', 'q24', 'q26']: request += f' {Rnum}'
            # if need apeend 2 argument
            elif quest in ['q10', 'q12', 'q13', 'q14', 'q21', 'q22', 'q23']: request += f' {Rnum} {Rnum2}'

            try:
                if question[quest][1](request): 
                    points += 1
                    await ctx.send('### ‚úî **< –í–µ—Ä–Ω–æ >** ‚úî')
                else: 
                    await ctx.send('### ‚ùå **< –ù–µ–≤–µ—Ä–Ω–æ >** ‚ùå')
                    break
            except ValueError: 
                await ctx.send('### ‚ùå **< –ù–µ–≤–µ—Ä–Ω–æ >** ‚ùå')
                break
            except KeyError: 
                await ctx.send('### ‚ùå **< –ù–µ–≤–µ—Ä–Ω–æ >** ‚ùå')
                break
        await ctx.send(embed=disnake.Embed(description=f'## –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ [{player}]: `{points}`\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä: `{SO}`\n–ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞: `{firstNum}`\n–ß–∏—Å–ª–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: `{secondNum}`\n–¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ: `{operNum}`', color=disnake.Color.green()))

    @commands.command(name='world', aliases=['wd', '–≤–æ—Ä–ª–¥'])
    async def wordl(self, ctx):

        userEnter = ctx.message.content.replace(f'{ctx.message.content.split(' ')[0]} ', '')
        if len(userEnter.split()) >= 1:
            if userEnter.split()[0] == 'add':
                listEntered = userEnter.split()
                try: listEntered.remove(ctx.message.content.split(' ')[0])
                except: pass

                with open('./content/WORLD/dataSet.txt', 'r', encoding='UTF-8') as f:
                    wordsData = f.read()
                    
                addCount = 0
                rejectCount = 0

                for item in listEntered:
                    threshold = 0.50

                    morph = pymorphy3.MorphAnalyzer()
                    p = morph.parse(item.lower())
                    score = p[0].score

                    if score >= threshold and item.lower() not in wordsData.split():
                        wordsData += f' {item.lower()}'
                        addCount += 1
                    else: rejectCount += 1
                
                with open('./content/WORLD/dataSet.txt', 'w', encoding='UTF-8') as f:
                    f.write(wordsData)
                return await ctx.send(f'–°–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {addCount}\n—Å–ª–æ–≤ –æ—Ç–∫–ª–∞–Ω–µ–Ω–æ: {rejectCount}')
            elif userEnter == 'count':
                with open('./content/WORLD/dataSet.txt', 'r', encoding='UTF-8') as f:
                    wordsData = f.read()
                return await ctx.send(f'–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(wordsData.split())}')


        with open('./content/WORLD/dataSet.txt', 'r', encoding='UTF-8') as f:
            wordsData = (f.read()).split()

        word = random.choice(wordsData)
        countTry = len(word)//3 + 4
        enteredWord = ['‚¨õ'*len(word)]*countTry
        def getText():
            text = ''
            for item in enteredWord:
                text += f'{item}\n'
            return text
        
        openWord = ['- ']*len(word)
        maybeWord = []
        def getMaybeWord():
            openW = ''
            maybeW = ''
            for item in openWord: openW += f'{item} '
            for item in maybeWord: maybeW += f'{item} '
            else: 
                if maybeW == '': maybeW = '–ù–µ—Ç'

            return f'–û—Ç–∫—Ä—ã—Ç–æ–µ: {openW}'


        def check(e):
            return e.author.id == ctx.author.id

        originalMessage = await ctx.send(embed=disnake.Embed(title='–°–ª–æ–≤–æ –∑–∞–¥–∞–Ω–æ', description=f'–ù–∞ –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É: 180 —Å–µ–∫—É–Ω–¥.\n–°–ª–æ–≤–æ –æ–±–ª–∞–¥–∞–µ—Ç: {len(word)} –±—É–∫–≤–∞–º–∏.\n–ù–∞–ø–∏—à–∏—Ç–µ **—Å—Ç–æ–ø**, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n{getText()}').set_footer(text=getMaybeWord()))

        tryEnter = 0
        win = False
        while True:
            await originalMessage.edit(embed=disnake.Embed(title='–°–ª–æ–≤–æ –∑–∞–¥–∞–Ω–æ', description=f'–ù–∞ –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É: 3 –º–∏–Ω—É—Ç—ã.\n–°–ª–æ–≤–æ –æ–±–ª–∞–¥–∞–µ—Ç: {len(word)} –±—É–∫–≤–∞–º–∏.\n–ù–∞–ø–∏—à–∏—Ç–µ **—Å—Ç–æ–ø**, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n{getText()}').set_footer(text=getMaybeWord()))

            if win: return await ctx.send(embed=disnake.Embed(description=f'## –ü–æ–±–µ–¥–∞!\n–î–∞, —ç—Ç–æ –±—ã–ª–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–≤–æ: [{word}]', color=disnake.Color.green()))
            elif tryEnter == countTry and not win:
                return await ctx.send(embed=disnake.Embed(description=f'## –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...\n–ó–∞–≥–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º –±—ã–ª–æ: [{word}]', color=disnake.Color.red()))
            
            try: responce =  await self.bot.wait_for('message', check=check, timeout=180)
            except TimeoutError: return await ctx.send(embed=disnake.Embed(description=f'–í—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. \n–≠—Ç–∏–º —Å–ª–æ–≤–æ–º –±—ã–ª–æ: "{word}"', color=disnake.Color.dark_blue())) 
            request = responce.content

            if request.lower() in ['–∑–∞–∫–æ–Ω—á–∏—Ç—å', '—Å—Ç–æ–ø']:
                return await ctx.send(embed=disnake.Embed(description=f'–ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –°–ª–æ–≤–æ–º –±—ã–ª–æ: {word}'))

            brc = False
            for key in request:
                if len(request)//2 < request.count(key): brc = True
            if brc: continue

            if len(request) == len(word):
                listReq = list(request.lower())
                listWord = list(word.lower())
                checkWord = ''

                if request.lower() == word.lower(): 
                    win = True

                for index, item in enumerate(listWord):
                    if listReq[index] == item:
                        checkWord += 'üü©'
                        openWord[index] = f'[{listReq[index]}] '
                    elif listReq[index] in listWord:
                        checkWord += 'üü®'
                        if listReq[index] not in maybeWord: maybeWord.append(f'[{listReq[index]}]')
                    else:
                        checkWord += 'üü•'
                enteredWord[tryEnter] = checkWord
                tryEnter += 1

    @commands.command(name='r34')
    async def rule34(self, ctx):
        try: 
            if ctx.channel.guild:
                if not ctx.channel.nsfw and ctx.channel.id != 1205649033125830706:
                    return await ctx.send('–¢–æ–ª—å–∫–æ –õ–° –∏–ª–∏ –≤ NSFW –∫–∞–Ω–∞–ª–µ.')
        except: pass
        
        nameEnter = ctx.message.content.replace(f'{ctx.message.content.split(' ')[0]} ', '')
        name = nameEnter.split()[0]

        try:
            if name == ctx.message.content.split(' ')[0]:
                pid = random.randint(1, 200)
                url = 'https://api.rule34.xxx/index.php?page=dapi&s=post&q=index'
                params = {
                    "json":1,
                    "limit":50,
                    "pid":pid,
                    "tags":"-gay -ai_generated -yaoi -ambiguous_gender -hyper_muscles -armpit_hair -hyper_penis -hyper -male/male -fart -fart_fetish -fat -foot_fetish -overweight -trap -futanari"
                    }
                response = requests.get(f'{url}', params=params).json()
                select = random.choice(range(len(response)-1))
            elif name.lower() == 'gif':
                pid = random.randint(1, 200)
                url = 'https://api.rule34.xxx/index.php?page=dapi&s=post&q=index'
                params = {
                    "json":1,
                    "limit":50,
                    "pid":pid,
                    "tags":"-gay -ai_generated -yaoi -ambiguous_gender -hyper_muscles -armpit_hair -hyper_penis -hyper -male/male -fart -fart_fetish -fat -foot_fetish -overweight -trap -futanari gif -video"
                    }
                response = requests.get(f'{url}', params=params).json()
                select = random.choice(range(len(response)-1))
            elif name.lower() == "video":
                pid = random.randint(1, 200)
                url = 'https://api.rule34.xxx/index.php?page=dapi&s=post&q=index'
                params = {
                    "json":1,
                    "limit":50,
                    "pid":pid,
                    "tags":"-gay -ai_generated -yaoi -ambiguous_gender -hyper_muscles -armpit_hair -hyper_penis -hyper -male/male -fart -fart_fetish -fat -foot_fetish -overweight -trap -futanari video"
                    }
                response = requests.get(f'{url}', params=params).json()
                select = random.choice(range(len(response)-1))
            else:
                pid = random.randint(1, 200)
                url = 'https://api.rule34.xxx/index.php?page=dapi&s=post&q=index'
                params = {
                    "json":1,
                    "limit":50,
                    "pid":pid,
                    "tags":"-gay -ai_generated -yaoi -ambiguous_gender -hyper_muscles -armpit_hair -hyper_penis -hyper -male/male -fart -fart_fetish -fat -foot_fetish -overweight -trap -futanari"
                    }
                response = requests.get(f'{url}', params=params).json()
                select = random.choice(range(len(response)-1))
            # responseFile = requests.get(response[select]['file_url'])
            # extension = response[select]['file_url'].split('.')[-1]

            # with open(f'./content/TEMPR34FILE/randomImage.{extension}', 'wb') as f:
            #     f.write(responseFile.content)

            await ctx.send(f'{response[select]['file_url']}')
        except:
            await ctx.send('–ü–æ—Ö–æ–∂–µ –ª–∏–º–∏—Ç —Å–∞–π—Ç–∞ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.')

    @commands.command(name='dice')
    async def dice(self, ctx):
        try:
            userEnter = ctx.message.content.replace(f'{ctx.message.content.split(' ')[0]} ', '')
            if userEnter == ctx.message.content.split(' ')[0]:
                return await ctx.send(embed=disnake.Embed(
                    description='```–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞–π—Å–æ–≤: ```\n-> `cdn`\n c ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤, n ‚Äî —Å—Ç–æ—Ä–æ–Ω (1-n)'
                    ))
            dices = str(userEnter).split()
            text_output = ''
            for item in dices:
                try:
                    out = []
                    count, value = item.split('d')
                    for index in range(int(count)):
                        out.append(random.randint(1, int(value)))
                    t_out = ''
                    for i, v in enumerate(out): 
                        if len(out)-1 != i: t_out += f'{v}, '
                        else: t_out += f'{v}'
                    text_output += f'**[{item}]** -> `{t_out}`\n'
                except:
                    text_output += f'**[{item}]** i> –æ—à–∏–±–æ—á–Ω—ã–π –≤–≤–æ–¥\n'

            await ctx.send(embed=disnake.Embed(description=text_output))
        except HTTPException:
            await ctx.send(embed=disnake.Embed(description='–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤. \n–£–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã.', colour=disnake.Color.dark_red()))

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —è–¥—Ä–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ
def setup(bot:commands.Bot):
    bot.add_cog(Fun(bot))