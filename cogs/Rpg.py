from typing import Coroutine
import disnake
from disnake.ext import commands
from random import randint

import asyncio
import json

from .module.SystemCommandRPG import *

class RPG(commands.Cog):
    def __init__(self, bot=commands.Bot):
        self.bot = bot

    # TODO: need think how do this
    @commands.command(name='fight', aliases=['f'])
    async def fight(self, ctx):
        pass
    

    #! listener for switching pages
    @commands.Cog.listener('on_button_click')
    async def stat_list(self, inter: disnake.MessageInteraction):
        if inter.component.custom_id not in ['next', 'back', 'dropStat']:
            return
        
        try:
            with open('../bots/config/stat_list.json', encoding='UTF-8') as file:
                stat_list = json.load(file)
                file.close()

            message = stat_list[f'{inter.message.id}']

            if message['author'] != inter.author.id:
                await inter.response.send_message('`–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º –≤—ã–∑–æ–≤–∞.`', ephemeral=True)
                return
            
            if inter.component.custom_id == 'next':
                if message['index']+1 > len(message['embeds']):
                    await inter.response.defer()
                    return
                message['index']+= 1
                await inter.response.edit_message(embed=disnake.Embed.from_dict(message['embeds'][f'{message['index']}']))
            elif inter.component.custom_id == 'back':
                if message['index']-1 <= 0:
                    await inter.response.defer()
                    return
                message['index']-= 1
                await inter.response.edit_message(embed=disnake.Embed.from_dict(message['embeds'][f'{message['index']}']))
            elif inter.component.custom_id == 'dropStat':
                embed = disnake.Embed(title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',description='```–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.```')
                await inter.response.edit_message(embed=embed, components=None)
                return
            
            with open('../bots/config/stat_list.json', mode='w', encoding='UTF-8', ) as file:
                file.write(json.dumps(stat_list, indent=3, ensure_ascii=False))
                file.close()
        except:
            embed = disnake.Embed(title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',description='```–ê–∫—Ç–∏–≤–Ω–æ –∏–Ω–æ–µ –æ–∫–Ω–æ.```')
            await inter.response.edit_message(embed=embed, components=None)


    @commands.command(name='stat') #! Aliases add more variation
    async def stat(self, ctx, study=False):
        if ctx.message.author.id != 374061361606688788:
            await ctx.send('–í –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ~')
            return

        user = ctx.message.author.id
        try: pageStart = int(ctx.message.content.split()[1])
        except: pageStart = 1
        if not 1 <= pageStart <= 8: pageStart = 1

        # main information of user. Here describe all need info.
        userDatal = await userData(uid=user)

        # main page
        # TODO: finalize this page, in particular achivm, title and rank
        achivm = '–û—Ç—Å—É—Ç—Å–≤—É—é—Ç'
        for index, item in enumerate(userDatal['main']['ACHIVM']): 
            if index != len(userDatal['main']['ACHIVM'])-1: achivm+=f'{item}, '
            else: achivm+=f'{item}'
        if achivm == '': achivm = '–û—Ç—Å—É—Ç—Å–≤—É—é—Ç'
        text1 = f'–£—Ä–æ–≤–µ–Ω—å: `{userDatal['main']['LVL']} ({userDatal['main']['EXP']})`\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {userDatal['main']['REP']}\n\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:```{achivm}```'
        
        
        # money page
        money = userDatal['money']
        text2 = f'**–ì–ª–∞–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã**\n- –≠—Å—Å–µ–Ω—Ü–∏–∏ –¥—É—à: _`{money['ESSENCE']}`_\n- –û—Å–∫–æ–ª–∫–∏ –¥—É—à: _`{money['SHARD']}`_\n- –î—É—à–∏: _`{money['SOUL']}`_\n- –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –¥—É—à–∏: _`{money['CRISTAL_SOUL']}`_\n\n**–î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã**\n- –ú–æ–Ω–µ—Ç—ã ¬´–°–∏—Å—Ç–µ–º—ã¬ª: _`{money['COU']}`_\n- –ú–æ–Ω–µ—Ç—ã ¬´–ü—É—Å—Ç–æ—Ç—ã¬ª: _`{money['VCOIN']}`_\n- –ú–æ–Ω–µ—Ç—ã ¬´–°—É—â–Ω–æ—Å—Ç–∏¬ª: _`{money['ACOIN']}`_\n- –ú–æ–Ω–µ—Ç—ã ¬´–ò—Å—Ç–∏–Ω—ã¬ª: _`{money['TCOIN']}`_'


        # body score page
        body = userDatal['parametr']
        additional = 'p'
        param = {
            "FLX":'üêç **–ì–∏–±–∫–æ—Å—Ç—å:** ',
            "ST":'ü¶¥ **–°—Ç–æ–π–∫–æ—Å—Ç—å:** ',
            "STL":'üë• **–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å:** ',
            "SEN":'üëÄ **–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ:** ',
            "INS":'üß† **–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ',
            "CTR":'‚úä **–ö–æ–Ω—Ç—Ä–æ–ª—å:** ',
            "GEN":'üß¨ **–ì–µ–Ω–µ—Ç–∏–∫–∞:** ',
            "FR":'üî• **–û–≥–æ–Ω—å:** ',
            "ER":'‚õ∞ **–ó–µ–º–ª—è:** ',
            "AQ":'üíß **–í–æ–¥–∞:** ',
            "WD":'üí® **–í–æ–∑–¥—É—Ö:** ',
            "HL":'‚úù **–°–≤—è—Ç–æ—Å—Ç—å:** ',
            "WG":'‚òÄ **–°–≤–µ—Ç:** ',
            "LG":'üíÄ **–¢–æ–∫—Å–∏–Ω:** ',
            "DR":'‚ö´ **–¢—å–º–∞:** ',
            }
        for item in param:
            if body[item] != 0:
                additional += f'{param[item]}_`{body[item]}`_\n'
        if additional == 'p': additional = ''
        else: additional = additional.replace('p', '\n\n```–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è```')
        text3 = f'‚ò• **–î—É—Ö–æ–≤–Ω–∞—è —Å–∏–ª–∞** - _`{body['SS']}`_ ‚ò•\n```–û—Å–Ω–æ–≤–Ω–∞—è```‚ô• **–ó–¥–æ—Ä–æ–≤—å–µ (+{body['REG']/100}s):** _`{body['HP']}`_\nüêé**–õ–æ–≤–∫–æ—Å—Ç—å:** {body['STR']}\n‚òó **–ó–∞—â–∏—Ç–∞:** _`{body['DEF']}`_\n‚ô£ **–£–¥–∞—á–∞:** _`{body['LUCK']}`_\n\nü©∏ **–ê—Ç–∞–∫–∞:** _`{body['ATK']}`_\nüß® **–ö—Ä–∏—Ç.–£–¥–∞—Ä:** _`{body['CRIT']/100+1}x ({body['CCRIT']}%)`_ {additional}'

 
        # equipment page
        equip = userDatal['equipment']
        main_text4 = '```–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ```'
        emp = 'p'
        emp_param = {
            "EMP_HEAD":'**–ì–æ–ª–æ–≤–∞:** ',
            "EMP_CHEST":'**–ì—Ä—É–¥—å:** ',
            "EMP_BELLY":'**–ñ–∏–≤–æ—Ç:** ',
            "EMP_RHAND":'**–ü—Ä–∞–≤–∞—è —Ä—É–∫–∞:** ',
            "EMP_LHAND":'**–õ–µ–≤–∞—è —Ä—É–∫–∞:** '
            }
        equip_param = {
            "HEAD":'**–ì–æ–ª–æ–≤–∞:** ',
            "NEAK":'**–®–µ—è:** ',
            "FINGER_1":'**–ë–µ–∑—ã–º—è–Ω–Ω—ã–π (–ø—Ä–∞–≤—ã–π):** ',
            "FINGER_2":'**–ë–µ–∑—ã–º—è–Ω–Ω—ã–π (–ª–µ–≤—ã–π):** ',
            "HAND_L":'**–õ–µ–≤–∞—è —Ä—É–∫–∞:** ',
            "HAND_R":'**–ü—Ä–∞–≤–∞—è —Ä—É–∫–∞:** ',
            "BODY":'**–¢–µ–ª–æ:** ',
            "LEGS":'**–ù–æ–≥–∏:** '
            }
        for index, item in enumerate(equip_param):
            if equip[item] != 0:
                main_text4 += f'{equip_param[item]}`{equip[item]}`\n'
            else:
                main_text4 += f'{equip_param[item]}`<None>`\n'
            if index in [1, 3, 5]:
                main_text4+='\n'
        for item in emp_param:
            if equip[item] != 0:
                emp += f'{emp_param[item]}_`{equip[item]}`_\n'
        if emp == 'p': emp = ''
        else: emp = emp.replace('p', '```–ò–º–ø–ª–∞–Ω—Ç—ã```')
        text4 = f'{main_text4}{emp}'


        # items page
        item = userDatal['inventory']
        main_text5 = '```–ü—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö```'
        item_param = {
            "SLOT1":'**–°–ª–æ—Ç 1:** ',
            "SLOT2":'**–°–ª–æ—Ç 2:** ',
            "SLOT3":'**–°–ª–æ—Ç 3:** ',
            "SLOT4":'**–°–ª–æ—Ç 4:** ',
            "SLOT5":'**–°–ª–æ—Ç 5:** '
            }
        for index, it in enumerate(item_param):
            if item[it] != 0:
                main_text5 += f'{item_param[it]}`{item[it]}`\n'
            else:
                main_text5 += f'{item_param[it]}`<None>`\n'
        # TODO: once perk get more slot for inventory, but relize this a little later.
        text5 = f'{main_text5}'


        # perk page
        perk = userDatal['perk']
        active = ''
        passive = ''
        special = ''
        text6 = f'```–ü–æ–∑–∂–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å```'


        # diplomaty page
        text7 = f''


        # other information page
        text8 = f''


        embeds = {
            '1': {
                'title':'–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
                'description':text1,
                "thumbnail": {"url": ctx.message.author.avatar.url},
                'footer':{'text':'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/8'}
                },
            '2': {
                'title':'–§–∏–Ω–∞–Ω—Å—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞',
                'description':text2,
                "thumbnail": {"url": ctx.message.author.avatar.url},
                'footer':{'text':'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2/8'}
                },
            '3': {
                'title':'–û—Ü–µ–Ω–∫–∞ —Ç–µ–ª–∞',
                'description':text3,
                "thumbnail": {"url": ctx.message.author.avatar.url},
                'footer':{'text':'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 3/8'}
                },
            '4': {
                'title':'–û–±–º—É–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'description':text4,
                "thumbnail": {"url": ctx.message.author.avatar.url},
                'footer':{'text':'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 4/8'}
                },
            '5': {
                'title':'–ü—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–∏ —Å–µ–±–µ',
                'description':text5,
                "thumbnail": {"url": ctx.message.author.avatar.url},
                'footer':{'text':'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 5/8'}
                },
            '6': {
                'title':'–ù–∞–≤—ã–∫–∏',
                'description':text6,
                "thumbnail": {"url": ctx.message.author.avatar.url},
                'footer':{'text':'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 6/8'}
                },
            '7': {
                'title':'–û—Ç–Ω–æ—à–µ–Ω–∏—è',
                'description':text7,
                "thumbnail": {"url": ctx.message.author.avatar.url},
                'footer':{'text':'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 7/8'}
                },
            '8': {
                'title':'–û—Å—Ç–∞–ª—å–Ω–æ–µ',
                'description':text8,
                "thumbnail": {"url": ctx.message.author.avatar.url},
                'footer':{'text':'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 8/8'}
                }
            }
        buttons = [
            disnake.ui.Button(style=disnake.ButtonStyle.gray, label='‚óÄ', custom_id='back'),
            disnake.ui.Button(style=disnake.ButtonStyle.gray, label='‚ñ∂', custom_id='next'),
            disnake.ui.Button(style=disnake.ButtonStyle.red, label='‚úñ', custom_id='dropStat')
            ]
        terms = int(DataBase.RPG().info(user_id=user, table='user_terms')[3]) == 1
        if terms and not study:
            buttons.append(disnake.ui.Button(style=disnake.ButtonStyle.blurple, label='???', custom_id='talk'))
            
        message = await ctx.send(embed=disnake.Embed.from_dict(embeds[f'{pageStart}']), components=buttons)
        message_id = message.id

        if terms:
            temporal = {
                "phase":1,
                "dialog_text":1,
                "message_id":message_id
                }
            with open(f'../bots/content/dialogs/temporal_dialog/{user}.json', mode='w', encoding='UTF-8') as file:
                file.write(json.dumps(temporal, indent=3, ensure_ascii=False))
                file.close()

        try: 
            with open('../bots/config/stat_list.json') as file:
                stat_list = json.load(file)
                file.close()
        except: pass
        try:
            stat_list[message_id] = {
                'author':user,
                'index':pageStart,
                'embeds':embeds
                }
        except:
            stat_list = {
                message_id:{
                    'author':user,
                    'index':pageStart,
                    'embeds':embeds
                    }
                }
        with open('../bots/config/stat_list.json', 'w', encoding='UTF-8') as file:
            file.write(json.dumps(stat_list, indent=3, ensure_ascii=False))
            file.close()

        # await deleteAfterEmbed(json_name='stat_list.json', message=message, time=60)


    @commands.command(name='test')
    async def test(self, ctx):
        pass

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —è–¥—Ä–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ
def setup(bot:commands.Bot):
    bot.add_cog(RPG(bot))